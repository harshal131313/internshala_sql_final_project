/*1. Create a table named 'matches' with appropriate data types for columns*/
CREATE table matches(
id int,
city varchar,
date date,
player_of_match varchar,
venue varchar,
neutral_venue int,
team1 varchar,
team2 varchar,
toss_winner varchar,
toss_decision varchar,
winner varchar,
results varchar,
result_margin int,
eliminator varchar,
method varchar,
umpire1 varchar,
umpire2 varchar);

/*2. Create a table named deliveries with appropriate data types for columns*/
CREATE TABLE deliveries (
match_id int,
inning int,
over int,
ball int,
batsman varchar,
non_striker varchar,
bowler varchar,
batsman_runs int,
extra_runs int,
total_runs int,
wicket_ball int,
dismissal_kind varchar,
player_dismissed varchar,
fielder varchar,
extras_type varchar,
batting_team varchar,
bowling_team varchar);
/*3. Import data from csv file 'IPL_matches.csv' attached in resources to 'matches'*/
copy deliveries from 'C:\Program Files\PostgreSQL\13\data\Datacopy\deliveries.csv'delimiter ',' csv header;
/*4. Import data from csv file 'IPL_Ball.csv' attached in resources to 'matches'*/
copy matches from 'C:\Program Files\PostgreSQL\13\data\Datacopy\matches.csv'delimiter ',' csv header;
/*5. Select the top 20 rows of the deliveries table.*/
select * from deliveries limit 20;
/*6. Select the top 20 rows of the matches table.*/
select * from matches limit 20;
/*7. Fetch data of all the matches played on 2nd May 2013.*/
select * from matches where date = '2013-05-02';
/*8. Fetch data of all the matches where the margin of victory is more than 100 runs.*/
select * from matches where result_margin > 100;
/*9. Fetch data of all the matches where the final scores of both teams tied and order it in descending order of the date.*/
select * from matches where results = 'tie' order by date desc;
/*10. Get the count of cities that have hosted an IPL match.*/
select distinct count(city) from matches ;
/*11. Create table deliveries_v02 with all the columns of deliveries and an additional column ball_result containing value
boundary, dot or other depending on the total run (boundary for >= 4, dot for 0 and other for any other number) 12. Write a query to fetch the total number of boundaries and dot balls*/
create table deliveries_v02 as select *,
CASE WHEN total_runs >= 4 then 'boundary'
WHEN total_runs = 0 THEN 'dot'
else 'other'
END as ball_result
FROM deliveries;

select * from deliveries_v02;
/*13. Write a query to fetch the total number of boundaries scored by each team*/
select count(ball_result)from deliveries_v02 where ball_result = 'boundary';
select count(ball_result),batting_team from deliveries_v02  where ball_result = 'boundary' group by batting_team ;
/*14. Write a query to fetch the total number of dot balls bowled by each team*/
select count(ball_result) from deliveries_v02 where ball_result = 'dot';
select count(ball_result),batting_team from deliveries_v02  where ball_result = 'dot' group by batting_team ;
/*15. Write a query to fetch the total number of dismissals by dismissal kinds*/
select count(dismissal_kind) from deliveries_v02 group by dismissal_kind;
select count(dismissal_kind) from deliveries_v02 where dismissal_kind = 'bowled'  group by dismissal_kind;
/*16. Write a query to get the top 5 bowlers who conceded maximum extra runs */
select bowler , sum(extra_runs) from deliveries_v02 where extra_runs> 4 group by bowler limit 5;
/*17. Write a query to create a table named deliveries_v03 with all the columns of deliveries_v02 table and two additional column (named venue and match_date) of venue and date from table matches*/
create table deliveries_v03 AS SELECT a.*, b.venue, b.match_date from
deliveries_v02 as a
left join (select max(venue) as venue, max(date) as match_date, id from matches group by
id) as b
on a.match_id = b.id;
select * from deliveries_v03;
/*18. Write a query to fetch the total runs scored for each venue and order it in the descending order of total runs scored*/
select sum(total_runs) as total_v_runs ,venue from deliveries_v03 group by venue order by total_v_runs desc;
/*19. Write a query to fetch the year-wise total runs scored at Eden Gardens and order it in the descending order of total runs scored.*/
select sum(total_runs) as total_vr , extract(year from match_date) from deliveries_v03 where venue = 'Eden Gardens' group by match_date order by match_date desc;
select * from matches;
/*20. Get unique team1 names from the matches table, you will notice that there are two entries for Rising Pune Supergiant one with Rising Pune Supergiant and another one with Rising Pune Supergiants. Your task is to create a matches_corrected table with two additional columns team1_corr and team2_corr containing team names with replacing Rising Pune Supergiants with Rising Pune Supergiant. Now analyse these newly created columns.*/
create table match_corr as select id, city, date, player_of_match, venue, neutral_venue , replace(team1,'Rising Pune Supergiants','Rising Pune Supergiant') as team_corr, replace(team2,'Rising Pune Supergiants','Rising Pune Supergiant') as team2_corr,toss_winner,toss_decision, winner , results, result_margin , eliminator, method, umpire1,umpire2 from matches;
select * from match_corr;
/*21. Create a new table deliveries_v04 with the first column as ball_id containing information of match_id, inning, over and ball separated by (For ex. 335982-1-0-1 match_id-inning-over-ball) and rest of the columns same as deliveries_v03)*/
create table deliveries_v04 as select *, concat(match_id||'-'||inning||'-'||over||'-'||ball) as ball_id from deliveries_v03;
select * from deliveries_v04;
/*22. Compare the total count of rows and total count of distinct ball_id in deliveries_v04;*/
select count(*),count(distinct ball_id)as ball_id from deliveries_v04;
/*
23. Create table deliveries_v05 with all columns of deliveries_v04 and an additional column for row number partition over ball_id. (HINT: row_number() over (partition by ball_id) as r_num) */
create table deliveries_v05 as select * , row_number() over (partition by  ball_id) as r_num from deliveries_v04;
select * from deliveries_v05;
/*24. Use the r_num created in deliveries_v05 to identify instances where ball_id is repeating. (HINT: select from
deliveries_v05 WHERE r_num=2;)*/     
select * from deliveries_v05 where  r_num = '1';
/*25. Use subqueries to fetch data of all the ball_id which are repeating. (HINT: SELECT * FROM deliveries_v05 WHERE ball_id in (select BALL_ID from deliveries_v05 WHERE r_num=2);*/
select* from deliveries_v05 where ball_id in (select ball_id from deliveries_v05 where r_num = '1');


 



















































